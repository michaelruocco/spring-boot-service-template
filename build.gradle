plugins {
    id "java-library"
    id "jacoco"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "com.diffplug.spotless" version "6.11.0"
    id "com.github.ben-manes.versions" version "0.43.0"
    id "pl.allegro.tech.build.axion-release" version "1.14.2"
    id "org.sonarqube" version "3.5.0.2730"
    id "com.adarshr.test-logger" version "3.2.0"
    id "nebula.lint" version "17.7.1"
}

scmVersion {
    versionCreator "versionWithBranch"
    tag {
        prefix = "${name}-"
    }
}
project.version = scmVersion.version

allprojects {
    apply plugin: "idea"
    apply plugin: "jacoco"
    apply plugin: "nebula.lint"

    group "com.github.michaelruocco.servicetemplate"
    version = rootProject.version

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = "0.8.7"
    }

    gradleLint {
        rules = ['all-dependency']
        alwaysRun = false
    }
}

subprojects {
    apply plugin: "java-library"
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'com.adarshr.test-logger'

    ext {
        slf4jVersion = "1.7.36"
        lombokVersion = "1.18.24"
        springBootVersion = "2.7.5"
        springVersion = "5.3.23"
        openApiGeneratorVersion = "6.2.1"

        junitVersion = "5.9.1"

        gitUrl = "https://github.com/michaelruocco/spring-boot-service-template"
        pomConfig = {
            licenses {
                license {
                    name "MIT License"
                    url "https://opensource.org/licenses/MIT"
                    distribution "repo"
                }
            }

            developers {
                developer {
                    id "mruoc"
                    name "Michael Ruocco"
                    email "michael.ruocco@hotmail.com"
                }
            }

            scm {
                url project.ext.gitUrl
            }
        }
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        testRuntimeOnly "org.slf4j:slf4j-simple:${slf4jVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.assertj:assertj-core:3.23.1"
        testImplementation "org.mockito:mockito-core:4.8.1"
    }

    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    tasks.withType(Test) {
        useJUnitPlatform()
        systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "debug"
    }

    testlogger {
        theme 'mocha'
        showStandardStreams true
    }

    spotless {
        java {
            palantirJavaFormat("2.27.0")
        }
    }
}

nexusPublishing {
    packageGroup = "com.github.michaelruocco"
    repositories {
        sonatype {
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

tasks.register("codeCoverageReport", JacocoReport) {
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    reports {
        xml.enabled true
        html.enabled true
    }
}

project.tasks["sonarqube"].dependsOn codeCoverageReport
sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "michaelruocco"
        property "sonar.projectKey", "michaelruocco_${name}"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}
